What did and why

>Excercise 1: Making the driver
    -Part 1:Decoupling keyboard and mouse
        This was a little tricky but ultimately this is what we ended up doing
            First we made a static structure keyBuffer to act as an inbetween for the part
            that reads the keys and the part that prints to console. We read in up to 10
            chars into the buffer then passed the console a method to get the next char from
            the buffer. We of course needed to lock the console while this happened so we
            made methods in console that are reachable by the keyboard (via defs.h) to call
            the console lock methods.
            Then we added a comparison to the part that reads the keyboard to ignore
            bytes with the bit that signified a mouse input (bitwise & with 0x20, but we
            named it msOrKbd and defined it in the header for readability). We return -1
            when that happens which causes the input loop to not add and ignore and we return
            -2 on a real error
    -Part 2:Initializing the mouse
        We ended up trial and erroring this for a few hours, on the bright side we know
        how now and it's really easy. It's just doing this for the first time and being
        unfamiliar with talking to devices through ports made it rough. In the end the wiki
        page (not really wikipedia but you get it) had exactly what to do in the right order
        and how to execute these tasks. Also note that I will be using the name for the various hex nums
        we created in mouse.h to refer to ports, ACKS and commands. So here's them here.
            #define MSSTATP         0x64    // port 0x64
            #define MSDATAP         0x60    // port 0x60

            #define MSCOMMAND       0xD4    //prepare to write to mouse
            #define MSINIT          0xF4    //init the mouse

            #define MSACK           0xFA    //ACK response from mouse

            #define GETCOMPAQ       0x20    //Get Compaq Status
            #define SETCOMPAQ       0x60    //set Compaq Status

            #define ENABLEMS        0xA8    //enable mouse
            #define ENABLEKBD       0xAE    //enable keyboard

            #define RESETMS         0xFF    //reset mouse

            #define TESTPASS        0xAA    //passed test
            #define ACK             0xFA    

            First empty the buffer (inb both MSDATAP and MSSTATP to read them)
            Next write ENABLEMS to MSSTATP to enable the mouse 
            Then write GETCOMPAQ to MSSTATP to get the compaq status from the mouse
            Next we turn on bit 1 and flip bit 5 using bitwise or and and respectively on 0x2 and 0x20
            After that you write SETCOMPAQ to MSSTATP and the new compaq setting to MSDATAP
            The next 3 I do in do-while loops since the next few return ACK or TESTPASS to signify they
            worked
                First up write MSCOMMAND to MSSTATP to ready the PS/2 controller to send a command to the
                mouse then write RESETMS to MSDATAP and read from MSDATAP, if it's an ACK break out of the
                loop and do the next. This will reset the mouse. Additionally this will break automatically
                after some number of attempts
                Second we check for a test pass after reset by reading from MSDATAP in a similar loop
                Finally we init the mouse by writing MSCOMMAND to MSSTATP just like last time but then
                writing MSINIT to MSDATAP otherwise this is the same as the first one
    -Part 3: Buffering mouse data
        For the mouse buffer we decided to take a consumer/producer approach (similar to the one learned 
        at CSE320). We decided to create a msBuffer struct inside the "mouse.c" file containing a char array of
        size 9 (to hold 3 complete mouse packets were each complete packet consists of 3 bytes of data), 
        a uint n that holds the buffer max size, a uint size variable to determine how many bytes of data are 
        currently available at the buffer, corresponging producer/consumer indexes, and required spring lock
        to sleep consumer process and have secure access to the buffer data without races. 
        We also provided a produce(uchar msg) function and a consume(char *pkt, uint size) function.


        The produce() Function:

        The produce function will be called when a mouse interrupt occurs. We first would check if 
        the buffer is full. In that case, our function will "flush" the buffer by reseting index and size variables. To maintain
        a circular buffer, each time the producer index reaches the maximum size, it is reset to 0. Then, it will write the received
        mouse packet to the buffer at the producerIndex position. Finally, the produce() function would wake-up the consumer process 
        when at least 3 bytes of data have been written to the buffer by calling the wakeup() function. 

        The consume() Function:

        Every time the consumer function is called, it will verify the size of the pointer passed as an argument, so if its size is less than
        3, the consumer won't pass any packet. Next it aquires the msLock spinlock. After that, it will verify how many bytes of data are available at the buffer by 
        using the size variable. If there are less than 3 bytes of data, the consumer will sleep until it is awakened by the produce function.
        The purpose of this implementation is to reduce code complexity by preventing use of incomplete mouse packages. Therefore, when a 
        full sequence of three bytes of data is detected, the produce function will wake the consumer up, and this one will copy the next 3 bytes
        from the consumer index to the pointer preserving the order of the packets in the buffer. 

        Since we had some problems with the alignment of packets, we also make a sanity check inside the consumer function using overflow x and y bits.
        If those are set for some reason in the first byte of the sequence, the entire buffer is reset. This helped to prevent most (if not all) the remaining
        issues we found with alignment. Add T_IRQ0 + IRQ_MS case to "trap.c" and call the mouse interupt

        After some testing, we realized that the packets where missaligned. To fix it we did the following:
            - We noticed that some ACK packets on startup were being processed by the produce function, causing
            them to get stored at the buffer. We simply added an if statement to produce to discard those.

            - We also implemented a sanity check in consume where the 3rd byte (0x8) of the first mouse packet of each 3 sequence should be set
            and that both overflow bits aren't set because the wiki suggests that means it's likely invalid.
            Else, we empty the buffer.

>Exercise 2: System Call
    This was pretty straight forward you just had to put everything in the right spots. First define SYS_readmouse
    as 22 in "syscall.h". Now you can add an "extern int sys_readmouse(void);" so that it detects the sys_readmouse
    method when you make it and add "[SYS_readmouse]    sys_readmouse" to the syscalls array. At this point we
    just add sys_readmouse to the "sysproc.c" file which takes a pointer using argptr from the syscall args when
    the syscall occurs and as long as there is no error (the pointer isn't outside the user address space included)
    it calls readmouse as defined in "mouse.c". The readmouse method simply calls consume as mentioned in buffer
    and puts the data in the pointer provided.

    At this point you can define IRQ_MS in "traps.h" as 12it'same so we can more easily understand what is happening when we
    add 12 to the interrupt offset. In the case we call mouseintr from mouse.c which reads from MSSTATP and makes sure 
    it's from the mouse my checking that bits 0 and 5 aren't 0 then it reads from MSDATAP and puts it in the buffer using
    produce.

How to Test:

    To test our mouse driver we have provided a testing program called "test_prog". To initialize it, you need to type "test_prog" in the console
    and then hit enter. The program will begin by asking you to move your mouse in certain directions following this order: right, left, up, down. 
    There are sensitivity values defined at the top and the location of the mouse is tracked between
    each movement. You may click left click during this to track your position, the default is 1000 in the given
    direction.

    Then, the program will warn you that you are about to enter an infinite loop. The warning also indicates that to exit the program you 
    need to click the mouse buttons in the sequefollowing order: Left, Left, Right, Left.   After reading the warning, you will need to click 
    the left button to start the infinite loop. Feel free to move the mouse as will. 

    Inside the loop, each action performed with the mouse will be processed, printing out what was going on at that point of time. 
    For example, if you move the mouse to the right while clicking the left button, you will see that "left button pressed" and "mouse moved to the right" 
    messages will print. Also the position will be printed after every mouse interrupt.

Assumptions and design decisions

    Some notable ones is that if a packet is missaligned in the buffer then we should expell the whole buffer.
    We also assume that the user will simply reinput if they see their input go unrecognized due to a 
    buffer emptying.

    We also assume that mouse data will be constantly consumed as new mouse data is discarded. 

    We do not assume the condition is still true after we sleep so we check it again
